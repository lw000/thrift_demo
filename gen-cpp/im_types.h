/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef im_TYPES_H
#define im_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace LW {

class LWException;

class MsgConnected;

class MsgChat;

class Student;

typedef struct _LWException__isset {
  _LWException__isset() : errorCode(false), message(false) {}
  bool errorCode :1;
  bool message :1;
} _LWException__isset;

class LWException : public ::apache::thrift::TException {
 public:

  LWException(const LWException&);
  LWException& operator=(const LWException&);
  LWException() : errorCode(0), message() {
  }

  virtual ~LWException() throw();
  int32_t errorCode;
  std::string message;

  _LWException__isset __isset;

  void __set_errorCode(const int32_t val);

  void __set_message(const std::string& val);

  bool operator == (const LWException & rhs) const
  {
    if (!(errorCode == rhs.errorCode))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const LWException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LWException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(LWException &a, LWException &b);

inline std::ostream& operator<<(std::ostream& out, const LWException& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _MsgConnected__isset {
  _MsgConnected__isset() : cmd(false) {}
  bool cmd :1;
} _MsgConnected__isset;

class MsgConnected {
 public:

  MsgConnected(const MsgConnected&);
  MsgConnected& operator=(const MsgConnected&);
  MsgConnected() : cmd(0) {
  }

  virtual ~MsgConnected() throw();
  int32_t cmd;

  _MsgConnected__isset __isset;

  void __set_cmd(const int32_t val);

  bool operator == (const MsgConnected & rhs) const
  {
    if (!(cmd == rhs.cmd))
      return false;
    return true;
  }
  bool operator != (const MsgConnected &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MsgConnected & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MsgConnected &a, MsgConnected &b);

inline std::ostream& operator<<(std::ostream& out, const MsgConnected& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _MsgChat__isset {
  _MsgChat__isset() : v(false), mid(false), sid(false), cmd(false) {}
  bool v :1;
  bool mid :1;
  bool sid :1;
  bool cmd :1;
} _MsgChat__isset;

class MsgChat {
 public:

  MsgChat(const MsgChat&);
  MsgChat& operator=(const MsgChat&);
  MsgChat() : v(0), mid(0), sid(0), cmd(0) {
  }

  virtual ~MsgChat() throw();
  int32_t v;
  int32_t mid;
  int32_t sid;
  int32_t cmd;

  _MsgChat__isset __isset;

  void __set_v(const int32_t val);

  void __set_mid(const int32_t val);

  void __set_sid(const int32_t val);

  void __set_cmd(const int32_t val);

  bool operator == (const MsgChat & rhs) const
  {
    if (!(v == rhs.v))
      return false;
    if (!(mid == rhs.mid))
      return false;
    if (!(sid == rhs.sid))
      return false;
    if (!(cmd == rhs.cmd))
      return false;
    return true;
  }
  bool operator != (const MsgChat &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MsgChat & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MsgChat &a, MsgChat &b);

inline std::ostream& operator<<(std::ostream& out, const MsgChat& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Student__isset {
  _Student__isset() : sno(false), sname(false), ssex(false), sage(false) {}
  bool sno :1;
  bool sname :1;
  bool ssex :1;
  bool sage :1;
} _Student__isset;

class Student {
 public:

  Student(const Student&);
  Student& operator=(const Student&);
  Student() : sno(0), sname(), ssex(0), sage(0) {
  }

  virtual ~Student() throw();
  int32_t sno;
  std::string sname;
  bool ssex;
  int16_t sage;

  _Student__isset __isset;

  void __set_sno(const int32_t val);

  void __set_sname(const std::string& val);

  void __set_ssex(const bool val);

  void __set_sage(const int16_t val);

  bool operator == (const Student & rhs) const
  {
    if (!(sno == rhs.sno))
      return false;
    if (!(sname == rhs.sname))
      return false;
    if (!(ssex == rhs.ssex))
      return false;
    if (!(sage == rhs.sage))
      return false;
    return true;
  }
  bool operator != (const Student &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Student & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Student &a, Student &b);

inline std::ostream& operator<<(std::ostream& out, const Student& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
