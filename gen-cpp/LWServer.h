/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef LWServer_H
#define LWServer_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "im_types.h"

namespace LW {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class LWServerIf {
 public:
  virtual ~LWServerIf() {}
  virtual void login(const std::string& name, const std::string& psd) = 0;
  virtual void logout() = 0;
  virtual int32_t put(const Student& s) = 0;
  virtual int32_t send(const int32_t s, const int32_t t, const std::string& data) = 0;
  virtual int32_t add(const int32_t a, const int32_t b) = 0;
  virtual int32_t sum(const int32_t v) = 0;
};

class LWServerIfFactory {
 public:
  typedef LWServerIf Handler;

  virtual ~LWServerIfFactory() {}

  virtual LWServerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(LWServerIf* /* handler */) = 0;
};

class LWServerIfSingletonFactory : virtual public LWServerIfFactory {
 public:
  LWServerIfSingletonFactory(const boost::shared_ptr<LWServerIf>& iface) : iface_(iface) {}
  virtual ~LWServerIfSingletonFactory() {}

  virtual LWServerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(LWServerIf* /* handler */) {}

 protected:
  boost::shared_ptr<LWServerIf> iface_;
};

class LWServerNull : virtual public LWServerIf {
 public:
  virtual ~LWServerNull() {}
  void login(const std::string& /* name */, const std::string& /* psd */) {
    return;
  }
  void logout() {
    return;
  }
  int32_t put(const Student& /* s */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t send(const int32_t /* s */, const int32_t /* t */, const std::string& /* data */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t add(const int32_t /* a */, const int32_t /* b */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t sum(const int32_t /* v */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _LWServer_login_args__isset {
  _LWServer_login_args__isset() : name(false), psd(false) {}
  bool name :1;
  bool psd :1;
} _LWServer_login_args__isset;

class LWServer_login_args {
 public:

  LWServer_login_args(const LWServer_login_args&);
  LWServer_login_args& operator=(const LWServer_login_args&);
  LWServer_login_args() : name(), psd() {
  }

  virtual ~LWServer_login_args() throw();
  std::string name;
  std::string psd;

  _LWServer_login_args__isset __isset;

  void __set_name(const std::string& val);

  void __set_psd(const std::string& val);

  bool operator == (const LWServer_login_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(psd == rhs.psd))
      return false;
    return true;
  }
  bool operator != (const LWServer_login_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LWServer_login_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LWServer_login_pargs {
 public:


  virtual ~LWServer_login_pargs() throw();
  const std::string* name;
  const std::string* psd;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LWServer_login_result {
 public:

  LWServer_login_result(const LWServer_login_result&);
  LWServer_login_result& operator=(const LWServer_login_result&);
  LWServer_login_result() {
  }

  virtual ~LWServer_login_result() throw();

  bool operator == (const LWServer_login_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LWServer_login_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LWServer_login_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LWServer_login_presult {
 public:


  virtual ~LWServer_login_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class LWServer_logout_args {
 public:

  LWServer_logout_args(const LWServer_logout_args&);
  LWServer_logout_args& operator=(const LWServer_logout_args&);
  LWServer_logout_args() {
  }

  virtual ~LWServer_logout_args() throw();

  bool operator == (const LWServer_logout_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LWServer_logout_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LWServer_logout_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LWServer_logout_pargs {
 public:


  virtual ~LWServer_logout_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LWServer_logout_result {
 public:

  LWServer_logout_result(const LWServer_logout_result&);
  LWServer_logout_result& operator=(const LWServer_logout_result&);
  LWServer_logout_result() {
  }

  virtual ~LWServer_logout_result() throw();

  bool operator == (const LWServer_logout_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LWServer_logout_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LWServer_logout_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LWServer_logout_presult {
 public:


  virtual ~LWServer_logout_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _LWServer_put_args__isset {
  _LWServer_put_args__isset() : s(false) {}
  bool s :1;
} _LWServer_put_args__isset;

class LWServer_put_args {
 public:

  LWServer_put_args(const LWServer_put_args&);
  LWServer_put_args& operator=(const LWServer_put_args&);
  LWServer_put_args() {
  }

  virtual ~LWServer_put_args() throw();
  Student s;

  _LWServer_put_args__isset __isset;

  void __set_s(const Student& val);

  bool operator == (const LWServer_put_args & rhs) const
  {
    if (!(s == rhs.s))
      return false;
    return true;
  }
  bool operator != (const LWServer_put_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LWServer_put_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LWServer_put_pargs {
 public:


  virtual ~LWServer_put_pargs() throw();
  const Student* s;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LWServer_put_result__isset {
  _LWServer_put_result__isset() : success(false) {}
  bool success :1;
} _LWServer_put_result__isset;

class LWServer_put_result {
 public:

  LWServer_put_result(const LWServer_put_result&);
  LWServer_put_result& operator=(const LWServer_put_result&);
  LWServer_put_result() : success(0) {
  }

  virtual ~LWServer_put_result() throw();
  int32_t success;

  _LWServer_put_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const LWServer_put_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LWServer_put_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LWServer_put_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LWServer_put_presult__isset {
  _LWServer_put_presult__isset() : success(false) {}
  bool success :1;
} _LWServer_put_presult__isset;

class LWServer_put_presult {
 public:


  virtual ~LWServer_put_presult() throw();
  int32_t* success;

  _LWServer_put_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _LWServer_send_args__isset {
  _LWServer_send_args__isset() : s(false), t(false), data(false) {}
  bool s :1;
  bool t :1;
  bool data :1;
} _LWServer_send_args__isset;

class LWServer_send_args {
 public:

  LWServer_send_args(const LWServer_send_args&);
  LWServer_send_args& operator=(const LWServer_send_args&);
  LWServer_send_args() : s(0), t(0), data() {
  }

  virtual ~LWServer_send_args() throw();
  int32_t s;
  int32_t t;
  std::string data;

  _LWServer_send_args__isset __isset;

  void __set_s(const int32_t val);

  void __set_t(const int32_t val);

  void __set_data(const std::string& val);

  bool operator == (const LWServer_send_args & rhs) const
  {
    if (!(s == rhs.s))
      return false;
    if (!(t == rhs.t))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const LWServer_send_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LWServer_send_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LWServer_send_pargs {
 public:


  virtual ~LWServer_send_pargs() throw();
  const int32_t* s;
  const int32_t* t;
  const std::string* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LWServer_send_result__isset {
  _LWServer_send_result__isset() : success(false) {}
  bool success :1;
} _LWServer_send_result__isset;

class LWServer_send_result {
 public:

  LWServer_send_result(const LWServer_send_result&);
  LWServer_send_result& operator=(const LWServer_send_result&);
  LWServer_send_result() : success(0) {
  }

  virtual ~LWServer_send_result() throw();
  int32_t success;

  _LWServer_send_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const LWServer_send_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LWServer_send_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LWServer_send_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LWServer_send_presult__isset {
  _LWServer_send_presult__isset() : success(false) {}
  bool success :1;
} _LWServer_send_presult__isset;

class LWServer_send_presult {
 public:


  virtual ~LWServer_send_presult() throw();
  int32_t* success;

  _LWServer_send_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _LWServer_add_args__isset {
  _LWServer_add_args__isset() : a(false), b(false) {}
  bool a :1;
  bool b :1;
} _LWServer_add_args__isset;

class LWServer_add_args {
 public:

  LWServer_add_args(const LWServer_add_args&);
  LWServer_add_args& operator=(const LWServer_add_args&);
  LWServer_add_args() : a(0), b(0) {
  }

  virtual ~LWServer_add_args() throw();
  int32_t a;
  int32_t b;

  _LWServer_add_args__isset __isset;

  void __set_a(const int32_t val);

  void __set_b(const int32_t val);

  bool operator == (const LWServer_add_args & rhs) const
  {
    if (!(a == rhs.a))
      return false;
    if (!(b == rhs.b))
      return false;
    return true;
  }
  bool operator != (const LWServer_add_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LWServer_add_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LWServer_add_pargs {
 public:


  virtual ~LWServer_add_pargs() throw();
  const int32_t* a;
  const int32_t* b;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LWServer_add_result__isset {
  _LWServer_add_result__isset() : success(false) {}
  bool success :1;
} _LWServer_add_result__isset;

class LWServer_add_result {
 public:

  LWServer_add_result(const LWServer_add_result&);
  LWServer_add_result& operator=(const LWServer_add_result&);
  LWServer_add_result() : success(0) {
  }

  virtual ~LWServer_add_result() throw();
  int32_t success;

  _LWServer_add_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const LWServer_add_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LWServer_add_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LWServer_add_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LWServer_add_presult__isset {
  _LWServer_add_presult__isset() : success(false) {}
  bool success :1;
} _LWServer_add_presult__isset;

class LWServer_add_presult {
 public:


  virtual ~LWServer_add_presult() throw();
  int32_t* success;

  _LWServer_add_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _LWServer_sum_args__isset {
  _LWServer_sum_args__isset() : v(false) {}
  bool v :1;
} _LWServer_sum_args__isset;

class LWServer_sum_args {
 public:

  LWServer_sum_args(const LWServer_sum_args&);
  LWServer_sum_args& operator=(const LWServer_sum_args&);
  LWServer_sum_args() : v(0) {
  }

  virtual ~LWServer_sum_args() throw();
  int32_t v;

  _LWServer_sum_args__isset __isset;

  void __set_v(const int32_t val);

  bool operator == (const LWServer_sum_args & rhs) const
  {
    if (!(v == rhs.v))
      return false;
    return true;
  }
  bool operator != (const LWServer_sum_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LWServer_sum_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LWServer_sum_pargs {
 public:


  virtual ~LWServer_sum_pargs() throw();
  const int32_t* v;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LWServer_sum_result__isset {
  _LWServer_sum_result__isset() : success(false) {}
  bool success :1;
} _LWServer_sum_result__isset;

class LWServer_sum_result {
 public:

  LWServer_sum_result(const LWServer_sum_result&);
  LWServer_sum_result& operator=(const LWServer_sum_result&);
  LWServer_sum_result() : success(0) {
  }

  virtual ~LWServer_sum_result() throw();
  int32_t success;

  _LWServer_sum_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const LWServer_sum_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LWServer_sum_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LWServer_sum_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LWServer_sum_presult__isset {
  _LWServer_sum_presult__isset() : success(false) {}
  bool success :1;
} _LWServer_sum_presult__isset;

class LWServer_sum_presult {
 public:


  virtual ~LWServer_sum_presult() throw();
  int32_t* success;

  _LWServer_sum_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class LWServerClient : virtual public LWServerIf {
 public:
  LWServerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  LWServerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void login(const std::string& name, const std::string& psd);
  void send_login(const std::string& name, const std::string& psd);
  void recv_login();
  void logout();
  void send_logout();
  void recv_logout();
  int32_t put(const Student& s);
  void send_put(const Student& s);
  int32_t recv_put();
  int32_t send(const int32_t s, const int32_t t, const std::string& data);
  void send_send(const int32_t s, const int32_t t, const std::string& data);
  int32_t recv_send();
  int32_t add(const int32_t a, const int32_t b);
  void send_add(const int32_t a, const int32_t b);
  int32_t recv_add();
  int32_t sum(const int32_t v);
  void send_sum(const int32_t v);
  int32_t recv_sum();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class LWServerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<LWServerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (LWServerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_login(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_logout(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_put(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_send(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sum(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  LWServerProcessor(boost::shared_ptr<LWServerIf> iface) :
    iface_(iface) {
    processMap_["login"] = &LWServerProcessor::process_login;
    processMap_["logout"] = &LWServerProcessor::process_logout;
    processMap_["put"] = &LWServerProcessor::process_put;
    processMap_["send"] = &LWServerProcessor::process_send;
    processMap_["add"] = &LWServerProcessor::process_add;
    processMap_["sum"] = &LWServerProcessor::process_sum;
  }

  virtual ~LWServerProcessor() {}
};

class LWServerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  LWServerProcessorFactory(const ::boost::shared_ptr< LWServerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< LWServerIfFactory > handlerFactory_;
};

class LWServerMultiface : virtual public LWServerIf {
 public:
  LWServerMultiface(std::vector<boost::shared_ptr<LWServerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~LWServerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<LWServerIf> > ifaces_;
  LWServerMultiface() {}
  void add(boost::shared_ptr<LWServerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void login(const std::string& name, const std::string& psd) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->login(name, psd);
    }
    ifaces_[i]->login(name, psd);
  }

  void logout() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->logout();
    }
    ifaces_[i]->logout();
  }

  int32_t put(const Student& s) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->put(s);
    }
    return ifaces_[i]->put(s);
  }

  int32_t send(const int32_t s, const int32_t t, const std::string& data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->send(s, t, data);
    }
    return ifaces_[i]->send(s, t, data);
  }

  int32_t add(const int32_t a, const int32_t b) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add(a, b);
    }
    return ifaces_[i]->add(a, b);
  }

  int32_t sum(const int32_t v) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sum(v);
    }
    return ifaces_[i]->sum(v);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class LWServerConcurrentClient : virtual public LWServerIf {
 public:
  LWServerConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  LWServerConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void login(const std::string& name, const std::string& psd);
  int32_t send_login(const std::string& name, const std::string& psd);
  void recv_login(const int32_t seqid);
  void logout();
  int32_t send_logout();
  void recv_logout(const int32_t seqid);
  int32_t put(const Student& s);
  int32_t send_put(const Student& s);
  int32_t recv_put(const int32_t seqid);
  int32_t send(const int32_t s, const int32_t t, const std::string& data);
  int32_t send_send(const int32_t s, const int32_t t, const std::string& data);
  int32_t recv_send(const int32_t seqid);
  int32_t add(const int32_t a, const int32_t b);
  int32_t send_add(const int32_t a, const int32_t b);
  int32_t recv_add(const int32_t seqid);
  int32_t sum(const int32_t v);
  int32_t send_sum(const int32_t v);
  int32_t recv_sum(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
